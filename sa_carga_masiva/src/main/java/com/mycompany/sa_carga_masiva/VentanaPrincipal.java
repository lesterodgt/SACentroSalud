/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sa_carga_masiva;

import com.mycompany.sa_carga_masiva.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 *
 * @author borja tobar
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbServicio = new javax.swing.JComboBox<>();
        btnEnviar = new javax.swing.JButton();
        txtDireccion = new javax.swing.JTextField();
        btnCargar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbServicio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ingreso Paciente", "Ingreso Medico", "Ingreso Diagnóstico", "Ingreso Citas", "Ingreso Atención Médica", "Ingreso Recetas", "Ingreso Medicamento", "Ingreso Despacho" }));

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnCargar.setText("Seleccionar Archivo");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDireccion)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEnviar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCargar)))
                        .addGap(0, 34, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCargar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviar)
                    .addComponent(btnLimpiar))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        String servicio = cmbServicio.getSelectedItem().toString();
        File archivo = new File(txtDireccion.getText());
        switch(servicio){
            case "Ingreso Paciente":
                ingresoPaciente(archivo);
                break;
            case "Ingreso Medico":
                ingresoMedico(archivo);
                break;
            case "Ingreso Diagnóstico":
                ingresoDiagnostico(archivo);
                break;
            case "Ingreso Citas":
                ingresoCitas(archivo);
                break;
            case "Ingreso Atención Médica":
                ingresoAtencionMedica(archivo);
                break;
            case "Ingreso Recetas":
                ingresoRecetas(archivo);
                break;
            case "Ingreso Medicamento":
                ingresoMedicamento(archivo);
                break;
            case "Ingreso Despacho":
                ingresoDespacho(archivo);
                break;
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        JFileChooser abrir = new JFileChooser("C:\\Users\\borja tobar\\Desktop\\Universidad\\SA\\Proyecto_Lab");
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        abrir.addChoosableFileFilter(new FileNameExtensionFilter("CSV Documents", "csv"));
        abrir.setAcceptAllFileFilterUsed(true);
        if(abrir.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            txtDireccion.setText(abrir.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtDireccion.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void ingresoPaciente(File archivo){
        JSONArray pacientes = new JSONArray();
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))){
            br.readLine();
            for(String linea; (linea = br.readLine()) != null;){
                if(!linea.equals("")){
                    String[] valores = linea.split(",");
                    JSONObject paciente = new JSONObject();
                    paciente.put("dpi", valores[0]);
                    paciente.put("nombre", valores[1]);
                    paciente.put("apellido", valores[2]);
                    paciente.put("telefono", valores[3]);
                    paciente.put("celular", valores[4]);
                    paciente.put("direccion", valores[5]);
                    paciente.put("estado", valores[6]);
                    paciente.put("fecha_nac", valores[7]);
                    pacientes.add(paciente);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject obj = new JSONObject();
        obj.put("paciente", pacientes);
        
        
        try { 
            WS_Service service = new WS_Service();
            WS port = service.getWSPort();
            String parametro = obj.toString();
            int result = port.ingresoPacienteCS2(parametro);
            System.out.println("Result = "+result);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }

        
    }
    
    private void ingresoMedico(File archivo){
        JSONArray medicos = new JSONArray();
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))){
            br.readLine();
            for(String linea; (linea = br.readLine()) != null;){
                if(!linea.equals("")){
                    String[] valores = linea.split(",");
                    JSONObject medico = new JSONObject();
                    medico.put("dpi", valores[0]);
                    medico.put("nombre", valores[1]);
                    medico.put("apellido", valores[2]);
                    medico.put("telefono", valores[3]);
                    medico.put("celular", valores[4]);
                    medico.put("direccion", valores[5]);
                    medicos.add(medico);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject obj = new JSONObject();
        obj.put("medico", medicos);
        
        try { 
            WS_Service service = new WS_Service();
            WS port = service.getWSPort();
            String parametro = obj.toString();
            int result = port.ingresoMedicoCS2(parametro);
            System.out.println("Result = "+result);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    private void ingresoDiagnostico(File archivo){
        try {
            BufferedReader b = new BufferedReader(new FileReader(archivo));
            String readLine = "";
            readLine = b.readLine();
            System.out.println("Reading file using Buffered Reader");

            JSONObject obj = new JSONObject();
            JSONArray list = new JSONArray();
            
            while ((readLine = b.readLine()) != null) {
                //System.out.println(readLine);
                String [] datta=readLine.split(",");
                
                JSONObject diagnostico=new JSONObject();
                diagnostico.put("descripcion", datta[2]);
                diagnostico.put("enfermedad", datta[1]);
                diagnostico.put("codigo", datta[0]);
                
                list.add(diagnostico);
                 
                //System.out.println(datta.length);
                
            }
            obj.put("diagnostico", list);
            
            try { 
                WS_Service service = new WS_Service();
                WS port = service.getWSPort();
                String parametro = obj.toString();
                int result = port.ingresoDiagnosticoCS2(parametro);
                System.out.println("Result = "+result);
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    private void ingresoCitas(File archivo){
        try {

            BufferedReader b = new BufferedReader(new FileReader(archivo));

            String readLine = "";
            readLine = b.readLine();

            System.out.println("Reading file using Buffered Reader");

            JSONObject obj = new JSONObject();
            JSONArray list = new JSONArray();
            
            while ((readLine = b.readLine()) != null) {
                //System.out.println(readLine);
                String [] datta=readLine.split(",");
                
                JSONObject diagnostico=new JSONObject();
                diagnostico.put("paciente", datta[1]);
                diagnostico.put("fecha", datta[0]);
                
                list.add(diagnostico);
                     
                //System.out.println(datta.length);
                
            }
            
            obj.put("cita", list);
            
            try { 
                WS_Service service = new WS_Service();
                WS port = service.getWSPort();
                String parametro = obj.toString();
                int result = port.ingresoCitaCS2(parametro);
                System.out.println("Result = "+result);
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
       
    public void ingresoAtencionMedica(File archivo){
        try {

            BufferedReader b = new BufferedReader(new FileReader(archivo));

            String readLine = "";
            readLine = b.readLine();

            System.out.println("Reading file using Buffered Reader");

            JSONObject obj = new JSONObject();
            JSONArray list = new JSONArray();
            
            while ((readLine = b.readLine()) != null) {
                //System.out.println(readLine);
                String [] datta=readLine.split(",");
                
                JSONObject diagnostico=new JSONObject();
                diagnostico.put("fecha", datta[0]);
                diagnostico.put("motivo", datta[1]);
                diagnostico.put("cita", datta[2]);
                diagnostico.put("medico", datta[3]);
                diagnostico.put("diagnostico", datta[4]);
                
                
                list.add(diagnostico);
                     
                //System.out.println(datta.length);     
            }
            
            obj.put("atencion", list);
            
            try { 
                WS_Service service = new WS_Service();
                WS port = service.getWSPort();
                String parametro = obj.toString();
                int result = port.ingresoAtencionMedicaCS2(readLine);
                System.out.println("Result = "+result);
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    private void ingresoRecetas(File archivo){
        try {

            BufferedReader b = new BufferedReader(new FileReader(archivo));

            String readLine = "";
            readLine = b.readLine();

            System.out.println("Reading file using Buffered Reader");

            JSONObject obj = new JSONObject();
            JSONArray list = new JSONArray();
            
            while ((readLine = b.readLine()) != null) {
                //System.out.println(readLine);
                String [] datta=readLine.split(",");
                
                JSONObject diagnostico=new JSONObject();
                diagnostico.put("indicaciones", datta[0]);
                diagnostico.put("atencion", datta[1]);                
                
                list.add(diagnostico);
                     
                //System.out.println(datta.length);     
            }
            
            obj.put("receta", list);
            
            try { 
                WS_Service service = new WS_Service();
                WS port = service.getWSPort();
                String parametro = obj.toString();
                int result = port.ingresoRecetaCS2(parametro);
                System.out.println("Result = "+result);
            } catch (Exception ex) {
                System.out.println(ex.toString());
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
     private void ingresoMedicamento(File archivo){
        JSONArray medicamentos = new JSONArray();
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))){
            br.readLine();
            for(String linea; (linea = br.readLine()) != null;){
                if(!linea.equals("")){
                    String[] valores = linea.split(",");
                    JSONObject medicamento = new JSONObject();
                    medicamento.put("codigo", valores[0]);
                    medicamento.put("nombre", valores[1]);
                    medicamento.put("descripcion", valores[2]);
                    medicamento.put("fabricante", valores[3]);
                    medicamento.put("precio", valores[4]);
                    medicamento.put("existencias", valores[5]);
                    medicamento.put("bajo_prescripcion", valores[6]);
                    medicamentos.add(medicamento);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject obj = new JSONObject();
        obj.put("medicamento", medicamentos);
        
        
        try {
            WSF_Service service = new WSF_Service();
            WSF port = service.getWSFPort();
            String parametro = obj.toString();
            int result = port.ingresoMedicamentoF2(parametro);
            System.out.println("Result = "+result);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }

    }
    
    private void ingresoDespacho(File archivo){
        JSONArray despachos = new JSONArray();
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))){
            br.readLine();
            JSONObject despacho = new JSONObject();
            JSONArray detalles = new JSONArray();
            String nombres = "";
            String dpi = "";
            String cantidad = "";
            String medicamento = "";
            for(String linea; (linea = br.readLine()) != null;){
                if(!linea.equals("")){
                    String[] valores = linea.split(",");
                    if(nombres.equals("") && dpi.equals("") && nombres.equals("") && dpi.equals("")){
                        nombres = valores[0];
                        dpi = valores[1];
                        cantidad = valores[2];
                        medicamento = valores[3];
                    }else{
                        if(nombres.equals(valores[0]) && dpi.equals(valores[1])){
                            JSONObject detalle = new JSONObject();
                            detalle.put("cantidad", valores[2]);
                            detalle.put("medicamento", valores[3]);
                            detalles.add(detalle);
                        }else{
                            despacho.put("nombres", nombres);
                            despacho.put("dpi", dpi);
                            JSONObject detalle = new JSONObject();
                            detalle.put("cantidad", cantidad);
                            detalle.put("medicamento", medicamento);
                            detalles.add(0, detalle);
                            despacho.put("detalle", detalles.clone());
                            detalles.clear();
                            despachos.add(despacho.clone());
                            despacho.clear();
                            nombres = valores[0];
                            dpi = valores[1];
                            cantidad = valores[2];
                            medicamento = valores[3];
                        }
                    }
                }          
            }
            despacho.put("nombres", nombres);
            despacho.put("dpi", dpi);
            JSONObject detalle = new JSONObject();
            detalle.put("cantidad", cantidad);
            detalle.put("medicamento", medicamento);
            detalles.add(0, detalle);
            despacho.put("detalle", detalles.clone());
            detalles.clear();
            despachos.add(despacho.clone());
            despacho.clear();
        }catch (FileNotFoundException e) {
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }  
        JSONObject obj = new JSONObject();
        obj.put("despacho", despachos);
        
        try {
            WSF_Service service = new WSF_Service();
            WSF port = service.getWSFPort();
            String parametro = obj.toString();
            int result = port.ingresoDespachoF2(parametro);
            System.out.println("Result = "+result);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cmbServicio;
    private javax.swing.JTextField txtDireccion;
    // End of variables declaration//GEN-END:variables
}
